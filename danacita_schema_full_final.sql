
-- Danacita FULL schema (Postgres)
-- Filename: /mnt/data/danacita_schema_full_final.sql
-- Contains: users, devices, addresses, bank_accounts, employment, documents,
-- contacts, emergency_contacts, telemetry_events, installed_apps, usage_stats,
-- clipboard_logs, calendar_events, sms_logs, notifications, crash_reports,
-- hardware_ids, accessibility_events, audit_logs, loan_applications
-- Generated by assistant.

-- Enable useful extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Core users table
CREATE TABLE IF NOT EXISTS users (
    id                  BIGSERIAL PRIMARY KEY,
    external_user_id    UUID DEFAULT uuid_generate_v4() UNIQUE,
    name                TEXT,
    phone               TEXT UNIQUE,
    email               TEXT,
    dob                 DATE,
    gender              VARCHAR(16),
    national_id         TEXT, -- KTP / NIK (sensitive)
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Devices: device identifiers and tokens
CREATE TABLE IF NOT EXISTS devices (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE SET NULL,
    device_uuid         UUID DEFAULT uuid_generate_v4() NOT NULL UNIQUE,
    imei                TEXT,
    android_id          TEXT,
    advertising_id      TEXT, -- GAID
    imsi                TEXT,
    sim_serial          TEXT,
    device_model        TEXT,
    device_brand        TEXT,
    os_version          TEXT,
    app_version         TEXT,
    fcm_token           TEXT,
    last_seen_at        TIMESTAMP WITH TIME ZONE,
    metadata            JSONB,
    registered_at       TIMESTAMP WITH TIME ZONE DEFAULT now(),
    CONSTRAINT devices_null_check CHECK (imei IS NOT NULL OR android_id IS NOT NULL OR advertising_id IS NOT NULL)
);

CREATE INDEX IF NOT EXISTS idx_devices_user_id ON devices(user_id);
CREATE INDEX IF NOT EXISTS idx_devices_imei ON devices(imei);

-- Addresses
CREATE TABLE IF NOT EXISTS addresses (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    type                VARCHAR(32), -- home, work, billing
    address_line        TEXT,
    city                TEXT,
    province            TEXT,
    postal_code         TEXT,
    country             TEXT DEFAULT 'ID',
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Bank accounts
CREATE TABLE IF NOT EXISTS bank_accounts (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    bank_name           TEXT,
    account_number      TEXT,
    account_holder      TEXT,
    verified            BOOLEAN DEFAULT FALSE,
    verified_at         TIMESTAMP WITH TIME ZONE,
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_bank_accounts_user ON bank_accounts(user_id);

-- Employment / income
CREATE TABLE IF NOT EXISTS employment (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    employer_name       TEXT,
    job_title           TEXT,
    income_monthly      NUMERIC(14,2),
    employment_type     VARCHAR(64),
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Documents / uploads
CREATE TABLE IF NOT EXISTS documents (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    device_id           BIGINT REFERENCES devices(id) ON DELETE SET NULL,
    doc_type            VARCHAR(64), -- ktp, selfie, bank_statement, invoice
    file_name           TEXT,
    mime_type           TEXT,
    file_size           BIGINT,
    storage_url         TEXT,
    exif                JSONB,
    uploaded_at         TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_documents_user ON documents(user_id);

-- Contacts (address book)
CREATE TABLE IF NOT EXISTS contacts (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    contact_name        TEXT,
    contact_phone       TEXT,
    contact_email       TEXT,
    relation            VARCHAR(64),
    imported_from_device BOOLEAN DEFAULT FALSE,
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Emergency contacts (new)
CREATE TABLE IF NOT EXISTS emergency_contacts (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    device_id           BIGINT REFERENCES devices(id) ON DELETE SET NULL,
    contact_name        TEXT NOT NULL,
    contact_phone       TEXT NOT NULL,
    contact_email       TEXT,
    relation            VARCHAR(64),
    is_primary          BOOLEAN DEFAULT FALSE,
    imported_from_device BOOLEAN DEFAULT FALSE,
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_emerg_user_id ON emergency_contacts(user_id);
CREATE INDEX IF NOT EXISTS idx_emerg_contact_phone ON emergency_contacts(contact_phone);
CREATE UNIQUE INDEX IF NOT EXISTS ux_emerg_primary_per_user ON emergency_contacts(user_id) WHERE (is_primary IS TRUE);

-- Telemetry / events
CREATE TABLE IF NOT EXISTS telemetry_events (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE SET NULL,
    device_id           BIGINT REFERENCES devices(id) ON DELETE SET NULL,
    event_name          TEXT NOT NULL,
    event_props         JSONB,
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_telemetry_user_event ON telemetry_events(user_id, event_name);

-- Installed apps snapshot
CREATE TABLE IF NOT EXISTS installed_apps (
    id                  BIGSERIAL PRIMARY KEY,
    device_id           BIGINT REFERENCES devices(id) ON DELETE CASCADE,
    package_name        TEXT,
    title               TEXT,
    version             TEXT,
    detected_at         TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Usage stats
CREATE TABLE IF NOT EXISTS usage_stats (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    metric_name         TEXT,
    metric_value        JSONB,
    recorded_at         TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Clipboard logs (store with caution; consider hashing or not storing raw content)
CREATE TABLE IF NOT EXISTS clipboard_logs (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE SET NULL,
    device_id           BIGINT REFERENCES devices(id) ON DELETE SET NULL,
    clipboard_text_hash TEXT, -- store hash instead of raw text recommended
    clipboard_type      VARCHAR(64),
    captured_at         TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Calendar events (if imported)
CREATE TABLE IF NOT EXISTS calendar_events (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    title               TEXT,
    description         TEXT,
    location            TEXT,
    start_time          TIMESTAMP WITH TIME ZONE,
    end_time            TIMESTAMP WITH TIME ZONE,
    source              TEXT,
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- SMS / OTP logs (store only hashes if necessary)
CREATE TABLE IF NOT EXISTS sms_logs (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE SET NULL,
    device_id           BIGINT REFERENCES devices(id) ON DELETE SET NULL,
    phone_number        TEXT,
    otp_hash            TEXT,
    received_at         TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Notifications / push
CREATE TABLE IF NOT EXISTS notifications (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE SET NULL,
    device_id           BIGINT REFERENCES devices(id) ON DELETE SET NULL,
    fcm_token           TEXT,
    last_registered_at  TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Crash reports / diagnostics
CREATE TABLE IF NOT EXISTS crash_reports (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE SET NULL,
    device_id           BIGINT REFERENCES devices(id) ON DELETE SET NULL,
    title               TEXT,
    stacktrace          TEXT,
    metadata            JSONB,
    reported_at         TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Hardware identifiers table
CREATE TABLE IF NOT EXISTS hardware_ids (
    id                  BIGSERIAL PRIMARY KEY,
    device_id           BIGINT REFERENCES devices(id) ON DELETE CASCADE,
    serial_number       TEXT,
    bluetooth_mac       TEXT,
    sensor_ids          JSONB,
    recorded_at         TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Accessibility events captures (use with caution)
CREATE TABLE IF NOT EXISTS accessibility_events (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE SET NULL,
    event_text_hash     TEXT, -- store hash or redacted text to protect PII
    event_type          TEXT,
    captured_at         TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Audit logs for sensitive data access
CREATE TABLE IF NOT EXISTS audit_logs (
    id                  BIGSERIAL PRIMARY KEY,
    actor               TEXT,
    action              TEXT,
    target_table        TEXT,
    target_id           BIGINT,
    details             JSONB,
    created_at          TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Loan applications
CREATE TABLE IF NOT EXISTS loan_applications (
    id                  BIGSERIAL PRIMARY KEY,
    user_id             BIGINT REFERENCES users(id) ON DELETE CASCADE,
    application_no      TEXT UNIQUE,
    amount              NUMERIC(14,2),
    term_months         INTEGER,
    status              VARCHAR(32),
    submitted_at        TIMESTAMP WITH TIME ZONE DEFAULT now(),
    decision_at         TIMESTAMP WITH TIME ZONE,
    decision_note       TEXT
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_users_phone ON users(phone);
CREATE INDEX IF NOT EXISTS idx_users_national_id ON users(national_id);

-- Triggers: set updated_at for emergency_contacts (example)
CREATE OR REPLACE FUNCTION trg_set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_emerg_updated_at ON emergency_contacts;
CREATE TRIGGER trg_emerg_updated_at
BEFORE UPDATE ON emergency_contacts
FOR EACH ROW EXECUTE FUNCTION trg_set_updated_at();

-- Security notes:
--  - Encrypt PII columns at rest (national_id, imei, imsi, account_number, serials).
--  - Limit DB roles & use RLS for per-tenant/user data restrictions.
--  - Do not store OTPs in plain text; use hashing & short TTL.
--  - Ensure audit logging for access to sensitive tables.

